{"version":3,"sources":["logo.svg","network/helper.js","components/Tracklist.js","App.js","actions/index.js","serviceWorker.js","reducers/testReducer.js","reducers/trackReducer.js","reducers/index.js","index.js"],"names":["module","exports","handleAddQueue","trackUri","headers","Headers","access_token","localStorage","getItem","url","append","PromiseAddQueue","fetch","queryString","stringify","uri","method","mode","json","then","response","text","responseData","console","log","useStyles","makeStyles","theme","root","overflow","width","height","maxWidth","backgroundColor","palette","background","paper","Tracklist","tracks","useSelector","state","classes","className","style","length","Paper","List","map","track","index","ListItem","button","key","onClick","ListItemAvatar","Avatar","src","ListItemText","primary","generateListElement","keys","require","Spotify","window","cordova","plugins","SpotifyPlugin","App","useHistory","dispatch","useDispatch","useState","on","setOn","searchValue","setSearch","roomcode","setRoomcode","useModal","Dialog","open","onClose","URLSearchParams","location","search","get","setItem","Button","variant","color","login","auth","TextField","id","label","onChange","event","currentTarget","value","q","type","handleSearch","result","JSON","parse","item","trackItem","name","artist","image","payload","hostname","assign","querystring","code","Boolean","match","testReducer","action","trackReducer","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","startApp","ReactDOM","render","StrictMode","document","getElementById","addEventListener","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.178eae02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// contains helper functions for networking\r\nimport queryString from \"querystring\";\r\n\r\nexport const handleAddQueue = (\r\n  trackUri = \"spotify:track:3Fzlg5r1IjhLk2qRw667od\"\r\n) => {\r\n  let headers = new Headers();\r\n\r\n  const access_token = localStorage.getItem(\"access_token\");\r\n  const url = \"https://api.spotify.com/v1/me/player/queue\";\r\n\r\n  headers.append(\"Authorization\", \"Bearer \" + access_token);\r\n\r\n  const PromiseAddQueue = fetch(\r\n    url +\r\n      \"?\" +\r\n      queryString.stringify({\r\n        uri: trackUri\r\n      }),\r\n    {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      headers: headers,\r\n      json: true\r\n    }\r\n  )\r\n    .then(response => response.text())\r\n    .then(responseData => console.log(responseData));\r\n\r\n  return PromiseAddQueue;\r\n};\r\n\r\nexport const handleSearch = searchValue => {\r\n  let headers = new Headers();\r\n\r\n  const access_token = localStorage.getItem(\"access_token\");\r\n  const url = \"https://api.spotify.com/v1/search\";\r\n\r\n  headers.append(\"Authorization\", \"Bearer \" + access_token);\r\n\r\n  const PromiseSearch = fetch(\r\n    url +\r\n      \"?\" +\r\n      queryString.stringify({\r\n        q: searchValue,\r\n        type: \"track\"\r\n      }),\r\n    {\r\n      method: \"GET\",\r\n      mode: \"cors\",\r\n      headers: headers,\r\n      json: true\r\n    }\r\n  ).then(response => response.text());\r\n\r\n  return PromiseSearch;\r\n};\r\n","import React from \"react\";\r\nimport { useSelector, useDi } from \"react-redux\";\r\nimport DynamicList, { createCache } from \"react-window-dynamic-list\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FixedSizeList } from \"react-window\";\r\nimport { Paper, TextareaAutosize, Avatar } from \"@material-ui/core\";\r\nimport { handleAddQueue } from \"../network/helper\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    overflow: \"auto\",\r\n    width: \"100%\",\r\n    height: 400,\r\n    maxWidth: 300,\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\nfunction generateListElement(track, index) {\r\n  return (\r\n    <ListItem button key={index} onClick={() => handleAddQueue(track[\"uri\"])}>\r\n      <ListItemAvatar>\r\n        <Avatar src={`${track[\"image\"][\"url\"]}`} />\r\n      </ListItemAvatar>\r\n      <ListItemText primary={`${track[\"name\"]}`} />\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nfunction Tracklist() {\r\n  const tracks = useSelector(state => state.tracks);\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.style}>\r\n      {tracks.length > 0 ? (\r\n        <Paper className={classes.root}>\r\n          <List>\r\n            {tracks.map((track, index) => generateListElement(track, index))}\r\n          </List>\r\n        </Paper>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracklist;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTrack } from \"./actions\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { useModal } from \"react-modal-hook\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport { useHistory, Redirect, Link } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\nimport { handleAddQueue, handleSearch } from \"./network/helper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Tracklist from \"./components/Tracklist\";\r\nimport querystring from \"querystring\";\r\n\r\nexport const authEndpoint = \"https://accounts.spotify.com/authorize?\";\r\nconst keys = require(\"./data.json\");\r\nvar client_id = \"d5a94039038d4a12b5816fd9bf1e6af5\"; // Your client id\r\nvar client_secret = keys[\"secret_key\"]; // Your secret\r\nvar redirect_uri = \"com.example.cordovaspotifyapp://callback\";\r\nvar scopes = [\r\n  \"user-read-private\",\r\n  \"user-read-email\",\r\n  \"user-modify-playback-state\",\r\n];\r\n\r\nvar Spotify = window.cordova.plugins.SpotifyPlugin;\r\n\r\nfunction App() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const [on, setOn] = useState(false);\r\n  const [searchValue, setSearch] = useState(\"\");\r\n  const [roomcode, setRoomcode] = useState(\"\");\r\n  const [state, setState] = useState(null);\r\n  const [showSpotify, hideSpotify] = useModal(\r\n    () => (\r\n      <Dialog open={on} onClose={() => setOn(false)}>\r\n        <div>hello</div>\r\n      </Dialog>\r\n    ),\r\n    [on, setOn]\r\n  );\r\n  // fetch access token\r\n  const access_token = new URLSearchParams(window.location.search).get(\r\n    \"access_token\"\r\n  );\r\n\r\n  // add token to local storage\r\n  localStorage.setItem(\"access_token\", access_token);\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"blue\"\r\n        onClick={() => {\r\n          Spotify.login(client_id, redirect_uri, \"\").then((auth) => {\r\n            console.log(auth);\r\n          });\r\n        }}\r\n      >\r\n        Log in\r\n      </Button>\r\n      {access_token && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"blue\"\r\n          onClick={() => handleAddQueue()}\r\n        >\r\n          Add song\r\n        </Button>\r\n      )}\r\n      {access_token && (\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label=\"Search track...\"\r\n          onChange={(event) => setSearch(event.currentTarget.value)}\r\n        />\r\n      )}\r\n      {access_token && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"blue\"\r\n          onClick={() =>\r\n            handleSearch(searchValue).then((result) => {\r\n              const { tracks } = JSON.parse(result);\r\n              tracks[\"items\"].map((item) => {\r\n                const trackItem = {\r\n                  name: item[\"name\"], // track name\r\n                  artist: item[\"artists\"][0][\"name\"], // artist name\r\n                  uri: item[\"uri\"], // track URI\r\n                  image: item[\"album\"][\"images\"][0], // one image\r\n                };\r\n                dispatch(addTrack(trackItem));\r\n              });\r\n            })\r\n          }\r\n        >\r\n          Search\r\n        </Button>\r\n      )}\r\n      {access_token && <Tracklist />}\r\n      {!access_token && (\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label=\"Enter room code...\"\r\n          onChange={(event) => setRoomcode(event.currentTarget.value)}\r\n        />\r\n      )}\r\n      {!access_token && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"blue\"\r\n          onClick={() => {\r\n            console.log(window.location.hostname);\r\n            window.location.assign(\r\n              \"http://\" +\r\n                window.location.hostname +\r\n                \":8888/join?\" +\r\n                querystring.stringify({\r\n                  code: roomcode,\r\n                })\r\n            );\r\n          }}\r\n        >\r\n          Join Room\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const addTrack = trackElem => {\r\n  return {\r\n    type: \"ADD_TRACK\",\r\n    payload: trackElem\r\n  };\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const testReducer = (state = 0, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return state + 1;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default testReducer;\r\n","const trackReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TRACK\":\r\n      return [...state, action.payload];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default trackReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport testReducer from \"./testReducer\";\r\nimport trackReducer from \"./trackReducer\";\r\n\r\nconst allReducers = combineReducers({\r\n  testReducer,\r\n  tracks: trackReducer\r\n});\r\nexport default allReducers;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createStore } from \"redux\";\r\nimport allReducers from \"./reducers\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ModalProvider } from \"react-modal-hook\";\r\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\r\n\r\nconst store = createStore(\r\n  allReducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nconst startApp = () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <ModalProvider>\r\n          <Router>\r\n            <App />\r\n          </Router>\r\n        </ModalProvider>\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n  );\r\n};\r\n\r\nif (window.cordova) {\r\n  document.addEventListener(\"deviceready\", startApp, false);\r\n} else {\r\n  startApp();\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}