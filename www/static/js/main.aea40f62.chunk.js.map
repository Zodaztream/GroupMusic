{"version":3,"sources":["logo.svg","components/Tracklist.js","App.js","serviceWorker.js","reducers/testReducer.js","reducers/trackReducer.js","reducers/index.js","index.js"],"names":["module","exports","makeStyles","theme","root","overflow","width","height","maxWidth","backgroundColor","palette","background","paper","Tracklist","generator_poly","galois_field_table","replace","split","hex_to_binary","input","byte","binary","parseInt","toString","slice","length","App","useHistory","useDispatch","encoded","useState","roomcode","setRoomcode","encodedBinary","setEncodedBinary","Spotify","window","cordova","plugins","SpotifyPlugin","qr_chunks","match","integer_chunks","map","chunk","message_poly","i","first_term","alpha_power","indexOf","generator_poly_copy","term","term_split","term_alpha","Number","integer_term","j","generator_term","message_term","console","log","shift","longDivision","integer","index","splice","localStorage","setItem","Button","variant","color","onClick","login","res","char","charCodeAt","join","getToken","temp","String","fromCharCode","hex_to_character","error","alert","TextField","id","label","onChange","event","currentTarget","value","location","hostname","assign","querystring","stringify","code","Boolean","testReducer","state","action","type","trackReducer","payload","allReducers","combineReducers","tracks","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","startApp","ReactDOM","render","StrictMode","document","getElementById","addEventListener","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,0PCazBC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,OACVC,MAAO,OACPC,OAAQ,IACRC,SAAU,IACVC,gBAAiBN,EAAMO,QAAQC,WAAWC,WAiC/BC,IC1BXC,EACF,qLAGIC,EAAqB,+xCAOxBC,QAAQ,OAAQ,KAChBC,MAAM,KAyBT,SAASC,EAAcC,GACrB,IAAIC,EAAO,WACPC,EAASC,SAASH,EAAO,IAAII,SAAS,GAG1C,OAFAH,EAAOA,EAAKI,MAAM,EAAG,EAAIH,EAAOI,QAChCL,GAAQC,EAySKK,MA/If,WACkBC,cACCC,cADjB,IAtIyBC,EAqIZ,EAGOC,oBAAS,GAHhB,gCAIoBA,mBAAS,KAJ7B,gCAKmBA,mBAAS,KAL5B,mBAKNC,EALM,KAKIC,EALJ,OAM6BF,mBAAS,IANtC,mBAMNG,EANM,KAMSC,EANT,OAOaJ,mBAAS,MAPtB,mBASTK,GATS,UASCC,OAAOC,QAAQC,QAAQC,eACrC,GAAIN,EAAe,CACjB,IAAIO,GAhJmBX,EAgJWI,EA9IxB,UArEM,wBAqEN,OAAoBJ,GAApB,OApEU,QAoEV,OAlEO,gMAmEHb,QAAQ,OAAQ,IAAIyB,MAAM,YA8IpCC,EAAiBF,EAAUG,KAAI,SAAAC,GAAK,OAAItB,SAASsB,EAAO,OArDhE,SAAsBC,EAAc/B,GAKlC,IAAK,IAAIgC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAgB5B,IAfA,IAAIC,EAAaF,EAAa,GAAG5B,MAAM,KACnC+B,EAAcjC,EAAmBkC,QAAQF,EAAW,IAEpDG,EAAsBpC,EAAe6B,KAAI,SAAAQ,GAC3C,IAAIC,EAAaD,EAAKlC,MAAM,KACxBoC,EAAaC,OAAOF,EAAW,IAK/BG,EAAexC,EAHjBiC,EAAcK,GAAc,KACvBL,EAAcK,GAAc,IAC7BL,EAAcK,GAEpB,MAAM,GAAN,OAAUE,EAAV,YAA0BH,EAAW,OAI9BI,EAAI,EAAGA,EAAIN,EAAoBzB,OAAQ+B,IAAK,CACnD,IAAIC,EAAiBP,EAAoBM,GAAGvC,MAAM,KAAK,GACnDyC,EAAeb,EAAaW,GAAKX,EAAaW,GAAGvC,MAAM,KAAO,CAAC,EAAG,GACtE4B,EAAaW,GAAb,UAAqBE,EAAa,GAAKJ,OAAOG,GAA9C,YACEC,EAAa,IAIjBC,QAAQC,IAAIf,EAAa,IAGzBA,EAAagB,QAGfF,QAAQC,IAAIf,IAyBViB,CANyBpB,EAAeC,KACtC,SAACoB,EAASC,GAAV,gBACKD,EADL,YACgBrB,EAAejB,QAAU,EAAIuC,GAAS,OAGxDlD,GADAA,EAAiBA,EAAeE,QAAQ,MAAO,KACfC,MAAM,MAErBuB,EAAUyB,OAAO,EAAG,IAAKzB,EAAUyB,OAAO,GAAI,KAC9CzB,EAAUyB,OAAO,IAAK,KAAMzB,EAAUyB,OAAO,IAAK,KAOrE,OAFAC,aAAaC,QAAQ,eAFF,IAKjB,6BACE,kBAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,OACNC,QAAS,WAEPpC,EAAQqC,MA/OF,mCAEG,gCA6O8B,IAAI,SAASC,GAClDvC,EACEuC,EACGxD,MAAM,IACN0B,KAAI,SAAA+B,GACH,MAAO,CAACxD,GA7MCC,EA6M+BuD,EA5MjDvD,EAAMwD,WAAW,GAAGpD,SAAS,OADtC,IAA2BJ,KA+MVyD,KAAK,MAEVjB,QAAQC,IAAI,wBAdlB,UAoBA,kBAACQ,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,OACNC,QAAS,WAEPpC,EAAQ0C,UACN,SAASJ,GAEP,IAAIK,EAAO7C,EACRhB,MAAM,KACN0B,KAAI,SAAAtB,GACH,OAtMlB,SAA0BF,GACxB,OAAO4D,OAAOC,aAAa,KAAO7D,GAqMX8D,CA9MhB3D,SA8M+CD,EA9M/B,GAAGE,SAAS,QAgNpBqD,KAAK,IACRjB,QAAQC,IAAIa,IAAQK,MAEtB,SAASI,GACPC,MAAMD,QAjBd,UA1Be,YA0Fb,kBAACE,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,qBACNC,SAAU,SAAAC,GAAK,OAAIxD,EAAYwD,EAAMC,cAAcC,UAIrD,kBAACtB,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,OACNC,QAAS,WACPZ,QAAQC,IAAIxB,OAAOuD,SAASC,UAC5BxD,OAAOuD,SAASE,OACd,UACEzD,OAAOuD,SAASC,SAChB,cACAE,IAAYC,UAAU,CACpBC,KAAMjE,OAVhB,eC1UYkE,QACW,cAA7B7D,OAAOuD,SAASC,UAEe,UAA7BxD,OAAOuD,SAASC,UAEhBxD,OAAOuD,SAASC,SAASnD,MACvB,2D,YCTSyD,EATK,WAAwB,IAAvBC,EAAsB,uDAAd,EAAGC,EAAW,uCACzC,OAAQA,EAAOC,MACb,IAAK,YACH,OAAOF,EAAQ,EACjB,QACE,OAAOA,I,QCIEG,EATM,WAAyB,IAAxBH,EAAuB,uDAAf,GAAIC,EAAW,uCAC3C,OAAQA,EAAOC,MACb,IAAK,YACH,MAAM,GAAN,mBAAWF,GAAX,CAAkBC,EAAOG,UAC3B,QACE,OAAOJ,ICGEK,EAJKC,YAAgB,CAClCP,cACAQ,OAAQJ,I,QCKJK,EAAQC,YACZJ,EACApE,OAAOyE,8BAAgCzE,OAAOyE,gCAG1CC,EAAW,WACfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,UAKRO,SAASC,eAAe,UAIxB/E,OAAOC,QACT6E,SAASE,iBAAiB,cAAeN,GAAU,GAEnDA,IJiGI,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLvB,QAAQuB,MAAMA,EAAM0C,c","file":"static/js/main.aea40f62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { useSelector, useDi } from \"react-redux\";\r\nimport DynamicList, { createCache } from \"react-window-dynamic-list\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FixedSizeList } from \"react-window\";\r\nimport { Paper, TextareaAutosize, Avatar } from \"@material-ui/core\";\r\nimport { handleAddQueue } from \"../network/helper\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    overflow: \"auto\",\r\n    width: \"100%\",\r\n    height: 400,\r\n    maxWidth: 300,\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\nfunction generateListElement(track, index) {\r\n  return (\r\n    <ListItem button key={index} onClick={() => handleAddQueue(track[\"uri\"])}>\r\n      <ListItemAvatar>\r\n        <Avatar src={`${track[\"image\"][\"url\"]}`} />\r\n      </ListItemAvatar>\r\n      <ListItemText primary={`${track[\"name\"]}`} />\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nfunction Tracklist() {\r\n  const tracks = useSelector(state => state.tracks);\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.style}>\r\n      {tracks.length > 0 ? (\r\n        <Paper className={classes.root}>\r\n          <List>\r\n            {tracks.map((track, index) => generateListElement(track, index))}\r\n          </List>\r\n        </Paper>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracklist;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTrack } from \"./actions\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { useModal } from \"react-modal-hook\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport { useHistory, Redirect, Link } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\nimport { handleAddQueue, handleSearch } from \"./network/helper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Tracklist from \"./components/Tracklist\";\r\nimport querystring from \"querystring\";\r\n\r\nexport const authEndpoint = \"https://accounts.spotify.com/authorize?\";\r\n//const keys = require(\"../../data.json\");\r\nvar client_id = \"d5a94039038d4a12b5816fd9bf1e6af5\"; // Your client id\r\n//var client_secret = keys[\"secret_key\"]; // Your secret\r\nvar redirect_uri = \"com.example.cordovaspotifyapp\";\r\n\r\nconst mode_length = \"01000000000011111010\"; // This contains the mode bits (first 4 bits, followed by 16 bits determining the length)\r\nconst terminator_bits = \"0000\"; //these are required for QR codes incase the length is not exact.\r\n// Filler bits.\r\nconst subsequent_bits = `11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100`;\r\n\r\nvar generator_poly =\r\n  \"0x291 + 215x290 + 234x289 + 158x288 + 94x287 + 184x286 + 97x285 + 118x284 + 170x283 + 79x282 + 187x281 + 152x280 + 148x279 + 252x278 + 179x277 + 5x276 + 98x275 + 96x274 + 153x273\";\r\n\r\n//This is the log antilog table for the galois field(256), each INDEX represents the power-value of alpha (=2). e.g 29 = alpha^8 (i.e index 8)\r\nconst galois_field_table = `1\t2\t4\t8\t16\t32\t64\t128\t29\t58\t116\t232\t205\t135\t19\t38\t76\t152\t45\t90\t180\t117\t234\t201\t143\t3\t6\t12\t24\t48\t96\t192\t157\t39\t78\t156\t37\t74\t148\t53\r\n                        106\t212\t181\t119\t238\t193\t159\t35\t70\t140\t5\t10\t20\t40\t80\t160\t93\t186\t105\t210\t185\t111\t222\t161\t95\t190\t97\t194\t153\t47\t94\t188\t101\t202\t137\t15\t30\r\n                        60\t120\t240\t253\t231\t211\t187\t107\t214 177\t127\t254\t225\t223\t163\t91\t182\t113\t226\t217\t175\t67\t134\t17\t34\t68\t136\t13\t26\t52\t104\t208\t189\t103\t206\t129\r\n                        31\t62\t124\t248\t237\t199\t147\t59\t118\t236\t197\t151\t51\t102\t204\t133\t23\t46\t92\t184\t109\t218\t169\t79\t158\t33\t66\t132\t21\t42\t84\t168\t77\t154\t41\t82\r\n                        164\t85\t170\t73\t146\t57\t114\t228\t213\t183\t115\t230\t209\t191\t99\t198\t145\t63\t126\t252\t229\t215\t179\t123\t246\t241\t255\t227\t219\t171\t75\t150\t49\t98\t196\t149\r\n                        55\t110\t220\t165\t87\t174\t65\t130\t25\t50\t100\t200\t141\t7\t14\t28\t56\t112\t224\t221\t167\t83\t166\t81\t162\t89\t178\t121\t242\t249\t239\t195\t155\t43\t86\t172\t69\r\n                        138\t9\t18\t36\t72\t144\t61\t122\t244\t245\t247\t243\t251\t235\t203\t139\t11\t22\t44\t88\t176\t125\t250\t233\t207\t131\t27\t54\t108\t216\t173\t71\t142`\r\n  .replace(/\\s+/g, \" \")\r\n  .split(\" \");\r\n\r\n/*\r\n\r\nhex = \"H\".charCodeAt(0).toString(16); // convert character to hex (without 0x)\r\nbinary = parseInt(hex, 16).toString(2) // converts hex to binary\r\neight_bit = eight_bit.slice(0, 8 - binary.length) // Append 0s if necessary to make 8 bits.\r\neight_bit += binary\r\nbtoh = parseInt(eight_bit, 2).toString(16) // converts binary to hex\r\ncharacter = String.fromCharCode(0x48) // convert hex to character MUST USE 0x\r\n\r\nConvert binary to hex\r\n*/\r\n\r\n/**\r\n * Takes 1 character and outputs it's hex value (without 0x)\r\n * @param {string} input\r\n */\r\nfunction characters_to_hex(input) {\r\n  return input.charCodeAt(0).toString(16);\r\n}\r\n/**\r\n * Takes a hex value (integer part) and converts into 1 byte\r\n * @param {string} input\r\n */\r\nfunction hex_to_binary(input) {\r\n  var byte = \"00000000\";\r\n  var binary = parseInt(input, 16).toString(2);\r\n  byte = byte.slice(0, 8 - binary.length);\r\n  byte += binary;\r\n  return byte;\r\n}\r\n\r\n/**\r\n * Takes a string that's a byte\r\n * @param {string} input\r\n */\r\nfunction binary_to_hex(input) {\r\n  return parseInt(input, 2).toString(16);\r\n}\r\n\r\n/**\r\n * Takes a string of hex (without 0x) and converts into character\r\n * as per the ISO standard\r\n * @param {string} input\r\n */\r\nfunction hex_to_character(input) {\r\n  return String.fromCharCode(\"0x\" + input);\r\n}\r\n\r\nfunction comeplete_qr_code(encoded) {\r\n  // this takes all bits rearrenges them into a complete QR code order and returns them into equal chunks of 8 bits long\r\n  let all_bits = `${mode_length}${encoded}${terminator_bits}${subsequent_bits}`;\r\n  return all_bits.replace(/\\s+/g, \"\").match(/.{1,8}/g); //returns array of 8 bit chunks (strings)\r\n  //.join(\" \");\r\n}\r\n\r\n/////courtesty of https://sim0n.wordpress.com/2009/04/04/javascript-simple-algebraic-long-division/\r\n// Long divison\r\nfunction extractCompontents(Term, constantChar) {\r\n  var Comps = new Array();\r\n  Comps[0] = Term.split(constantChar)[0];\r\n  Comps[1] = Term.split(\"^\")[1];\r\n  if (Comps[0] == \"\") {\r\n    Comps[0] = 1;\r\n  }\r\n  if (String(Comps[1]) == \"undefined\") {\r\n    Comps[1] = 1;\r\n  }\r\n  return Comps;\r\n}\r\nfunction divideTerm(Term1, Term2, constantChar) {\r\n  var extTerm1 = extractCompontents(Term1, constantChar);\r\n  var extTerm2 = extractCompontents(Term2, constantChar);\r\n  return (\r\n    String(extTerm1[0] / extTerm2[0]) +\r\n    constantChar +\r\n    \"^\" +\r\n    String(extTerm1[1] - extTerm2[1])\r\n  );\r\n}\r\nfunction multiplyTerm(Term1, Term2, constantChar) {\r\n  var extTerm1 = extractCompontents(Term1, constantChar);\r\n  return String(extTerm1[0] * Term2) + constantChar + \"^\" + String(extTerm1[1]);\r\n}\r\n\r\nfunction subtractTerm(Term1, Term2, constantChar) {\r\n  var extTerm1 = extractCompontents(Term1, constantChar);\r\n  var extTerm2 = extractCompontents(Term2, constantChar);\r\n  if (extTerm1[1] != extTerm2[1]) {\r\n    return null;\r\n  }\r\n  return (\r\n    String(extTerm1[0] - extTerm2[0]) + constantChar + \"^\" + String(extTerm1[1])\r\n  );\r\n}\r\n\r\nfunction longAlgebraicDivision(poly, division) {\r\n  //Format the equations correctly\r\n  poly = poly.replace(/(--|\\+\\+)/g, \"+\");\r\n  poly = poly.replace(/(-\\+|\\+-)/g, \"-\");\r\n  poly = poly.replace(/^\\+/g, \"\");\r\n  poly = poly.replace(/\\s/g, \"\");\r\n  division = division.replace(/(--|\\+\\+)/g, \"+\");\r\n  division = division.replace(/(-\\+|\\+-)/g, \"-\");\r\n  division = division.replace(/^\\+/g, \"\");\r\n  division = division.replace(/\\s/g, \"\");\r\n  //Add spaces to the equation to break it apart\r\n  poly = poly.replace(/([+-])/g, \" $1\");\r\n  //Split the equation at the spaces\r\n  var equ = poly.split(\" \");\r\n  //Begin the division\r\n  var output = \"\";\r\n  var lastTerm = \"\";\r\n  for (var i = 0; i < equ.length - 1; i++) {\r\n    var term = equ[i];\r\n    if (i == 0) {\r\n      var dt = divideTerm(term, division.split(\"x\")[0], \"x\");\r\n      output += dt + \"+\";\r\n      dt = multiplyTerm(dt, division.split(\"x\")[1], \"x\");\r\n      lastTerm = dt;\r\n    } else {\r\n      var dt = subtractTerm(term, lastTerm, \"x\");\r\n      dt = divideTerm(dt, division.split(\"x\")[0], \"x\");\r\n      output += dt + \"+\";\r\n      dt = multiplyTerm(dt, division.split(\"x\")[1], \"x\");\r\n      lastTerm = dt;\r\n    }\r\n  }\r\n  //Format output\r\n  output = output.replace(/\\+([+-])/g, \"$1\");\r\n  output = output.replace(/x\\^0\\+$/g, \"\");\r\n  output = output.replace(/x\\^1/g, \"x\");\r\n  //Calculate remainder\r\n  lastTerm = lastTerm.replace(/x\\^0/g, \"\");\r\n  output +=\r\n    \" : Remainder [\" +\r\n    String(Number(equ[equ.length - 1]) - Number(lastTerm)) +\r\n    \"]\";\r\n  return output;\r\n}\r\n\r\nfunction longDivision(message_poly, generator_poly) {\r\n  //galois_field_table.indexOf(integer) = alpha power value\r\n  //Add spaces to the equation to break it apart\r\n  //Split the equation at the spaces\r\n  // multiply the lead term of the message poly by generator poly\r\n  for (let i = 0; i < 274; i++) {\r\n    let first_term = message_poly[0].split(\"x\");\r\n    var alpha_power = galois_field_table.indexOf(first_term[0]);\r\n    // multiplies the lead term of the message poly by the generator poly and, simultanouelsy converting the entire generator poly to integer\r\n    var generator_poly_copy = generator_poly.map(term => {\r\n      var term_split = term.split(\"x\");\r\n      var term_alpha = Number(term_split[0]);\r\n      var added_term =\r\n        alpha_power + term_alpha >= 256\r\n          ? (alpha_power + term_alpha) % 255\r\n          : alpha_power + term_alpha;\r\n      var integer_term = galois_field_table[added_term];\r\n      return `${integer_term}x${term_split[1]}`;\r\n    });\r\n\r\n    //XOR the generator_poly (now with integer notation) with the message polynomial, those with the same x_power, XOR by 0 with those \"outside\" the range of the generator_poly\r\n    for (let j = 0; j < generator_poly_copy.length; j++) {\r\n      let generator_term = generator_poly_copy[j].split(\"x\")[0];\r\n      let message_term = message_poly[j] ? message_poly[j].split(\"x\") : [0, 0];\r\n      message_poly[j] = `${message_term[0] ^ Number(generator_term)}x${\r\n        message_term[1]\r\n      }`;\r\n    }\r\n\r\n    console.log(message_poly[0]); // Not good, only the first item was 0\r\n\r\n    //discard the first term (which is 0)\r\n    message_poly.shift();\r\n  }\r\n\r\n  console.log(message_poly);\r\n\r\n  //LOOP\r\n\r\n  //console.log(message_poly); // lead_term should be 0, it is not. What's wrong. INvestigate tomorrow\r\n}\r\nfunction App() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const [on, setOn] = useState(false);\r\n  const [searchValue, setSearch] = useState(\"\");\r\n  const [roomcode, setRoomcode] = useState(\"\");\r\n  const [encodedBinary, setEncodedBinary] = useState(\"\");\r\n  const [state, setState] = useState(null);\r\n\r\n  var Spotify = window.cordova.plugins.SpotifyPlugin;\r\n  if (encodedBinary) {\r\n    let qr_chunks = comeplete_qr_code(encodedBinary);\r\n    let integer_chunks = qr_chunks.map(chunk => parseInt(chunk, 2)); //converts the byte chunks into integer, necessary for message polynomial (QR-related), these are coefficients\r\n    let message_polynomial = integer_chunks.map(\r\n      (integer, index) =>\r\n        `${integer}x${integer_chunks.length - (1 + index) + 18}`\r\n    );\r\n    generator_poly = generator_poly.replace(/\\s/g, \"\");\r\n    generator_poly = generator_poly.split(\"+\");\r\n    longDivision(message_polynomial, generator_poly);\r\n    let group_one = [qr_chunks.splice(0, 68), qr_chunks.splice(68, 136)];\r\n    let group_two = [qr_chunks.splice(136, 205), qr_chunks.splice(205, 274)];\r\n  }\r\n  //console.log(comeplete_qr_code(encodedBinary));\r\n  var access_token = \"\";\r\n  // add token to local storage (might still use this)\r\n  localStorage.setItem(\"access_token\", access_token);\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"blue\"\r\n        onClick={() => {\r\n          // below is for logging in\r\n          Spotify.login(client_id, redirect_uri, \"\", function(res) {\r\n            setEncodedBinary(\r\n              res\r\n                .split(\"\")\r\n                .map(char => {\r\n                  return [hex_to_binary(characters_to_hex(char))];\r\n                })\r\n                .join(\" \")\r\n            );\r\n            console.log(\"Now printing...\");\r\n          });\r\n        }}\r\n      >\r\n        Log in\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"blue\"\r\n        onClick={() => {\r\n          // This is when we want to retrieve token manually\r\n          Spotify.getToken(\r\n            function(res) {\r\n              // This tests that the decoded binary value is correct debugging purposes\r\n              let temp = encodedBinary\r\n                .split(\" \")\r\n                .map(binary => {\r\n                  return hex_to_character(binary_to_hex(binary));\r\n                })\r\n                .join(\"\");\r\n              console.log(res === temp);\r\n            },\r\n            function(error) {\r\n              alert(error);\r\n            }\r\n          );\r\n        }}\r\n      >\r\n        Log in\r\n      </Button>\r\n      {access_token && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"blue\"\r\n          onClick={() => handleAddQueue()}\r\n        >\r\n          Add song\r\n        </Button>\r\n      )}\r\n      {access_token && (\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label=\"Search track...\"\r\n          onChange={event => setSearch(event.currentTarget.value)}\r\n        />\r\n      )}\r\n      {access_token && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"blue\"\r\n          onClick={() =>\r\n            handleSearch(searchValue).then(result => {\r\n              const { tracks } = JSON.parse(result);\r\n              tracks[\"items\"].map(item => {\r\n                const trackItem = {\r\n                  name: item[\"name\"], // track name\r\n                  artist: item[\"artists\"][0][\"name\"], // artist name\r\n                  uri: item[\"uri\"], // track URI\r\n                  image: item[\"album\"][\"images\"][0] // one image\r\n                };\r\n                dispatch(addTrack(trackItem));\r\n              });\r\n            })\r\n          }\r\n        >\r\n          Search\r\n        </Button>\r\n      )}\r\n      {access_token && <Tracklist />}\r\n      {!access_token && (\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label=\"Enter room code...\"\r\n          onChange={event => setRoomcode(event.currentTarget.value)}\r\n        />\r\n      )}\r\n      {!access_token && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"blue\"\r\n          onClick={() => {\r\n            console.log(window.location.hostname);\r\n            window.location.assign(\r\n              \"http://\" +\r\n                window.location.hostname +\r\n                \":8888/join?\" +\r\n                querystring.stringify({\r\n                  code: roomcode\r\n                })\r\n            );\r\n          }}\r\n        >\r\n          Join Room\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const testReducer = (state = 0, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return state + 1;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default testReducer;\r\n","const trackReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TRACK\":\r\n      return [...state, action.payload];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default trackReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport testReducer from \"./testReducer\";\r\nimport trackReducer from \"./trackReducer\";\r\n\r\nconst allReducers = combineReducers({\r\n  testReducer,\r\n  tracks: trackReducer\r\n});\r\nexport default allReducers;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createStore } from \"redux\";\r\nimport allReducers from \"./reducers\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ModalProvider } from \"react-modal-hook\";\r\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\r\n\r\nconst store = createStore(\r\n  allReducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nconst startApp = () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <ModalProvider>\r\n          <Router>\r\n            <App />\r\n          </Router>\r\n        </ModalProvider>\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n  );\r\n};\r\n\r\nif (window.cordova) {\r\n  document.addEventListener(\"deviceready\", startApp, false);\r\n} else {\r\n  startApp();\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}