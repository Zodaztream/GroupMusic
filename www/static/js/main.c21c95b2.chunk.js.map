{"version":3,"sources":["logo.svg","components/Tracklist.js","App.js","serviceWorker.js","reducers/testReducer.js","reducers/trackReducer.js","reducers/index.js","index.js"],"names":["module","exports","makeStyles","theme","root","overflow","width","height","maxWidth","backgroundColor","palette","background","paper","hex_to_binary","input","byte","binary","parseInt","toString","slice","length","App","useHistory","useDispatch","encoded","useState","roomcode","setRoomcode","encodedBinary","setEncodedBinary","Spotify","window","cordova","plugins","SpotifyPlugin","console","log","replace","match","join","localStorage","setItem","Button","variant","color","onClick","login","res","split","map","char","charCodeAt","getToken","temp","String","fromCharCode","hex_to_character","error","alert","TextField","id","label","onChange","event","currentTarget","value","location","hostname","assign","querystring","stringify","code","Boolean","testReducer","state","action","type","trackReducer","payload","allReducers","combineReducers","tracks","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","startApp","ReactDOM","render","StrictMode","document","getElementById","addEventListener","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c21c95b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { useSelector, useDi } from \"react-redux\";\r\nimport DynamicList, { createCache } from \"react-window-dynamic-list\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FixedSizeList } from \"react-window\";\r\nimport { Paper, TextareaAutosize, Avatar } from \"@material-ui/core\";\r\nimport { handleAddQueue } from \"../network/helper\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    overflow: \"auto\",\r\n    width: \"100%\",\r\n    height: 400,\r\n    maxWidth: 300,\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\nfunction generateListElement(track, index) {\r\n  return (\r\n    <ListItem button key={index} onClick={() => handleAddQueue(track[\"uri\"])}>\r\n      <ListItemAvatar>\r\n        <Avatar src={`${track[\"image\"][\"url\"]}`} />\r\n      </ListItemAvatar>\r\n      <ListItemText primary={`${track[\"name\"]}`} />\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nfunction Tracklist() {\r\n  const tracks = useSelector(state => state.tracks);\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.style}>\r\n      {tracks.length > 0 ? (\r\n        <Paper className={classes.root}>\r\n          <List>\r\n            {tracks.map((track, index) => generateListElement(track, index))}\r\n          </List>\r\n        </Paper>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracklist;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTrack } from \"./actions\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { useModal } from \"react-modal-hook\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport { useHistory, Redirect, Link } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\nimport { handleAddQueue, handleSearch } from \"./network/helper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Tracklist from \"./components/Tracklist\";\r\nimport querystring from \"querystring\";\r\n\r\nexport const authEndpoint = \"https://accounts.spotify.com/authorize?\";\r\n//const keys = require(\"../../data.json\");\r\nvar client_id = \"d5a94039038d4a12b5816fd9bf1e6af5\"; // Your client id\r\n//var client_secret = keys[\"secret_key\"]; // Your secret\r\nvar redirect_uri = \"com.example.cordovaspotifyapp\";\r\n\r\nconst mode_length = \"01000000000011111010\"; // This contains the mode bits (first 4 bits, followed by 16 bits determining the length)\r\nconst terminator_bits = \"0000\"; //these are required for QR codes incase the length is not exact.\r\n// Filler bits.\r\nconst subsequent_bits = `11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100`;\r\n/*\r\n\r\nhex = \"H\".charCodeAt(0).toString(16); // convert character to hex (without 0x)\r\nbinary = parseInt(hex, 16).toString(2) // converts hex to binary\r\neight_bit = eight_bit.slice(0, 8 - binary.length) // Append 0s if necessary to make 8 bits.\r\neight_bit += binary\r\nbtoh = parseInt(eight_bit, 2).toString(16) // converts binary to hex\r\ncharacter = String.fromCharCode(0x48) // convert hex to character MUST USE 0x\r\n\r\nConvert binary to hex\r\n*/\r\n\r\n/**\r\n * Takes 1 character and outputs it's hex value (without 0x)\r\n * @param {string} input\r\n */\r\nfunction characters_to_hex(input) {\r\n  return input.charCodeAt(0).toString(16);\r\n}\r\n/**\r\n * Takes a hex value (integer part) and converts into 1 byte\r\n * @param {string} input\r\n */\r\nfunction hex_to_binary(input) {\r\n  var byte = \"00000000\";\r\n  var binary = parseInt(input, 16).toString(2);\r\n  byte = byte.slice(0, 8 - binary.length);\r\n  byte += binary;\r\n  return byte;\r\n}\r\n\r\n/**\r\n * Takes a string that's a byte\r\n * @param {string} input\r\n */\r\nfunction binary_to_hex(input) {\r\n  return parseInt(input, 2).toString(16);\r\n}\r\n\r\n/**\r\n * Takes a string of hex (without 0x) and converts into character\r\n * as per the ISO standard\r\n * @param {string} input\r\n */\r\nfunction hex_to_character(input) {\r\n  return String.fromCharCode(\"0x\" + input);\r\n}\r\n\r\nfunction comeplete_qr_code(encoded) {\r\n  // this takes all bits rearrenges them into a complete QR code order and returns them into equal chunks of 8 bits long\r\n  let all_bits = `${mode_length}${encoded}${terminator_bits}${subsequent_bits}`;\r\n  return all_bits\r\n    .replace(/\\s+/g, \"\")\r\n    .match(/.{1,8}/g)\r\n    .join(\" \");\r\n}\r\n\r\nfunction App() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const [on, setOn] = useState(false);\r\n  const [searchValue, setSearch] = useState(\"\");\r\n  const [roomcode, setRoomcode] = useState(\"\");\r\n  const [encodedBinary, setEncodedBinary] = useState(\"\");\r\n  const [state, setState] = useState(null);\r\n\r\n  var Spotify = window.cordova.plugins.SpotifyPlugin;\r\n  if (encodedBinary) console.log(comeplete_qr_code(encodedBinary));\r\n  //console.log(comeplete_qr_code(encodedBinary));\r\n  var access_token = \"\";\r\n  // add token to local storage (might still use this)\r\n  localStorage.setItem(\"access_token\", access_token);\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"blue\"\r\n        onClick={() => {\r\n          // below is for logging in\r\n          Spotify.login(client_id, redirect_uri, \"\", function(res) {\r\n            setEncodedBinary(\r\n              res\r\n                .split(\"\")\r\n                .map(char => {\r\n                  return [hex_to_binary(characters_to_hex(char))];\r\n                })\r\n                .join(\" \")\r\n            );\r\n            console.log(\"Now printing...\");\r\n          });\r\n        }}\r\n      >\r\n        Log in\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"blue\"\r\n        onClick={() => {\r\n          // This is when we want to retrieve token manually\r\n          Spotify.getToken(\r\n            function(res) {\r\n              // This tests that the decoded binary value is correct debugging purposes\r\n              let temp = encodedBinary\r\n                .split(\" \")\r\n                .map(binary => {\r\n                  return hex_to_character(binary_to_hex(binary));\r\n                })\r\n                .join(\"\");\r\n              console.log(res === temp);\r\n            },\r\n            function(error) {\r\n              alert(error);\r\n            }\r\n          );\r\n        }}\r\n      >\r\n        Log in\r\n      </Button>\r\n      {access_token && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"blue\"\r\n          onClick={() => handleAddQueue()}\r\n        >\r\n          Add song\r\n        </Button>\r\n      )}\r\n      {access_token && (\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label=\"Search track...\"\r\n          onChange={event => setSearch(event.currentTarget.value)}\r\n        />\r\n      )}\r\n      {access_token && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"blue\"\r\n          onClick={() =>\r\n            handleSearch(searchValue).then(result => {\r\n              const { tracks } = JSON.parse(result);\r\n              tracks[\"items\"].map(item => {\r\n                const trackItem = {\r\n                  name: item[\"name\"], // track name\r\n                  artist: item[\"artists\"][0][\"name\"], // artist name\r\n                  uri: item[\"uri\"], // track URI\r\n                  image: item[\"album\"][\"images\"][0] // one image\r\n                };\r\n                dispatch(addTrack(trackItem));\r\n              });\r\n            })\r\n          }\r\n        >\r\n          Search\r\n        </Button>\r\n      )}\r\n      {access_token && <Tracklist />}\r\n      {!access_token && (\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label=\"Enter room code...\"\r\n          onChange={event => setRoomcode(event.currentTarget.value)}\r\n        />\r\n      )}\r\n      {!access_token && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"blue\"\r\n          onClick={() => {\r\n            console.log(window.location.hostname);\r\n            window.location.assign(\r\n              \"http://\" +\r\n                window.location.hostname +\r\n                \":8888/join?\" +\r\n                querystring.stringify({\r\n                  code: roomcode\r\n                })\r\n            );\r\n          }}\r\n        >\r\n          Join Room\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const testReducer = (state = 0, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return state + 1;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default testReducer;\r\n","const trackReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TRACK\":\r\n      return [...state, action.payload];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default trackReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport testReducer from \"./testReducer\";\r\nimport trackReducer from \"./trackReducer\";\r\n\r\nconst allReducers = combineReducers({\r\n  testReducer,\r\n  tracks: trackReducer\r\n});\r\nexport default allReducers;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createStore } from \"redux\";\r\nimport allReducers from \"./reducers\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ModalProvider } from \"react-modal-hook\";\r\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\r\n\r\nconst store = createStore(\r\n  allReducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nconst startApp = () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <ModalProvider>\r\n          <Router>\r\n            <App />\r\n          </Router>\r\n        </ModalProvider>\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n  );\r\n};\r\n\r\nif (window.cordova) {\r\n  document.addEventListener(\"deviceready\", startApp, false);\r\n} else {\r\n  startApp();\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}